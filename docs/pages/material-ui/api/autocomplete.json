{
  "props": {
    "options": { "type": { "name": "array" }, "required": true },
    "renderInput": {
      "type": { "name": "func" },
      "required": true,
      "signature": { "type": "function(params: object) => ReactNode", "describedArgs": [] }
    },
    "autoComplete": { "type": { "name": "bool" }, "default": "false" },
    "autoHighlight": { "type": { "name": "bool" }, "default": "false" },
    "autoSelect": { "type": { "name": "bool" }, "default": "false" },
    "blurOnSelect": {
      "type": {
        "name": "union",
        "description": "'mouse'<br>&#124;&nbsp;'touch'<br>&#124;&nbsp;bool"
      },
      "default": "false"
    },
    "ChipProps": {
      "type": { "name": "object" },
      "deprecated": true,
      "deprecationInfo": "Use <code>slotProps.chip</code> instead. This prop will be removed in a future major release. See <a href=\"/material-ui/migration/migrating-from-deprecated-apis/\">Migrating from deprecated APIs</a> for more details."
    },
    "classes": { "type": { "name": "object" }, "additionalInfo": { "cssApi": true } },
    "clearIcon": { "type": { "name": "node" }, "default": "<ClearIcon fontSize=\"small\" />" },
    "clearOnBlur": { "type": { "name": "bool" }, "default": "!props.freeSolo" },
    "clearOnEscape": { "type": { "name": "bool" }, "default": "false" },
    "clearText": { "type": { "name": "string" }, "default": "'Clear'" },
    "closeText": { "type": { "name": "string" }, "default": "'Close'" },
    "componentsProps": {
      "type": {
        "name": "shape",
        "description": "{ clearIndicator?: object, paper?: object, popper?: object, popupIndicator?: object }"
      },
      "deprecated": true,
      "deprecationInfo": "Use the <code>slotProps</code> prop instead. This prop will be removed in a future major release. See <a href=\"https://mui.com/material-ui/migration/migrating-from-deprecated-apis/\">Migrating from deprecated APIs</a> for more details."
    },
    "defaultValue": {
      "type": { "name": "custom", "description": "any" },
      "default": "props.multiple ? [] : null"
    },
    "disableClearable": { "type": { "name": "bool" }, "default": "false" },
    "disableCloseOnSelect": { "type": { "name": "bool" }, "default": "false" },
    "disabled": { "type": { "name": "bool" }, "default": "false" },
    "disabledItemsFocusable": { "type": { "name": "bool" }, "default": "false" },
    "disableListWrap": { "type": { "name": "bool" }, "default": "false" },
    "disablePortal": { "type": { "name": "bool" }, "default": "false" },
    "filterOptions": {
      "type": { "name": "func" },
      "default": "createFilterOptions()",
      "signature": {
        "type": "function(options: Array<Value>, state: object) => Array<Value>",
        "describedArgs": ["options", "state"]
      }
    },
    "filterSelectedOptions": { "type": { "name": "bool" }, "default": "false" },
    "forcePopupIcon": {
      "type": { "name": "union", "description": "'auto'<br>&#124;&nbsp;bool" },
      "default": "'auto'"
    },
    "freeSolo": { "type": { "name": "bool" }, "default": "false" },
    "fullWidth": { "type": { "name": "bool" }, "default": "false" },
    "getLimitTagsText": {
      "type": { "name": "func" },
      "default": "(more) => `+${more}`",
      "signature": { "type": "function(more: number) => ReactNode", "describedArgs": ["more"] }
    },
    "getOptionDisabled": {
      "type": { "name": "func" },
      "signature": { "type": "function(option: Value) => boolean", "describedArgs": ["option"] }
    },
    "getOptionKey": {
      "type": { "name": "func" },
      "signature": {
        "type": "function(option: Value) => string | number",
        "describedArgs": ["option"]
      }
    },
    "getOptionLabel": {
      "type": { "name": "func" },
      "default": "(option) => option.label ?? option",
      "signature": { "type": "function(option: Value) => string", "describedArgs": [] }
    },
    "groupBy": {
      "type": { "name": "func" },
      "signature": { "type": "function(option: Value) => string", "describedArgs": ["option"] }
    },
    "handleHomeEndKeys": { "type": { "name": "bool" }, "default": "!props.freeSolo" },
    "id": { "type": { "name": "string" } },
    "includeInputInList": { "type": { "name": "bool" }, "default": "false" },
    "inputValue": { "type": { "name": "string" } },
    "isOptionEqualToValue": {
      "type": { "name": "func" },
      "signature": {
        "type": "function(option: Value, value: Value) => boolean",
        "describedArgs": ["option", "value"]
      }
    },
    "limitTags": { "type": { "name": "custom", "description": "integer" }, "default": "-1" },
    "ListboxComponent": {
      "type": { "name": "elementType" },
      "default": "'ul'",
      "deprecated": true,
      "deprecationInfo": "Use <code>slotProps.listbox.component</code> instead. This prop will be removed in a future major release. See <a href=\"/material-ui/migration/migrating-from-deprecated-apis/\">Migrating from deprecated APIs</a> for more details."
    },
    "ListboxProps": {
      "type": { "name": "object" },
      "deprecated": true,
      "deprecationInfo": "Use <code>slotProps.listbox</code> instead. This prop will be removed in a future major release. See <a href=\"/material-ui/migration/migrating-from-deprecated-apis/\">Migrating from deprecated APIs</a> for more details."
    },
    "loading": { "type": { "name": "bool" }, "default": "false" },
    "loadingText": { "type": { "name": "node" }, "default": "'Loadingâ€¦'" },
    "multiple": { "type": { "name": "bool" }, "default": "false" },
    "noOptionsText": { "type": { "name": "node" }, "default": "'No options'" },
    "onChange": {
      "type": { "name": "func" },
      "signature": {
        "type": "function(event: React.SyntheticEvent, value: Value | Array<Value>, reason: string, details?: string) => void",
        "describedArgs": ["event", "value", "reason"]
      }
    },
    "onClose": {
      "type": { "name": "func" },
      "signature": {
        "type": "function(event: React.SyntheticEvent, reason: string) => void",
        "describedArgs": ["event", "reason"]
      }
    },
    "onHighlightChange": {
      "type": { "name": "func" },
      "signature": {
        "type": "function(event: React.SyntheticEvent, option: Value, reason: string) => void",
        "describedArgs": ["event", "option", "reason"]
      }
    },
    "onInputChange": {
      "type": { "name": "func" },
      "signature": {
        "type": "function(event: React.SyntheticEvent, value: string, reason: string) => void",
        "describedArgs": ["event", "value", "reason"]
      }
    },
    "onOpen": {
      "type": { "name": "func" },
      "signature": {
        "type": "function(event: React.SyntheticEvent) => void",
        "describedArgs": ["event"]
      }
    },
    "open": { "type": { "name": "bool" } },
    "openOnFocus": { "type": { "name": "bool" }, "default": "false" },
    "openText": { "type": { "name": "string" }, "default": "'Open'" },
    "PaperComponent": {
      "type": { "name": "elementType" },
      "default": "Paper",
      "deprecated": true,
      "deprecationInfo": "Use <code>slots.paper</code> instead. This prop will be removed in a future major release. See <a href=\"/material-ui/migration/migrating-from-deprecated-apis/\">Migrating from deprecated APIs</a> for more details."
    },
    "PopperComponent": {
      "type": { "name": "elementType" },
      "default": "Popper",
      "deprecated": true,
      "deprecationInfo": "Use <code>slots.popper</code> instead. This prop will be removed in a future major release. See <a href=\"/material-ui/migration/migrating-from-deprecated-apis/\">Migrating from deprecated APIs</a> for more details."
    },
    "popupIcon": { "type": { "name": "node" }, "default": "<ArrowDropDownIcon />" },
    "readOnly": { "type": { "name": "bool" }, "default": "false" },
    "renderGroup": {
      "type": { "name": "func" },
      "signature": {
        "type": "function(params: AutocompleteRenderGroupParams) => ReactNode",
        "describedArgs": ["params"]
      }
    },
    "renderOption": {
      "type": { "name": "func" },
      "signature": {
        "type": "function(props: object, option: Value, state: object, ownerState: object) => ReactNode",
        "describedArgs": ["props", "option", "state", "ownerState"]
      }
    },
    "renderTags": {
      "type": { "name": "func" },
      "deprecated": true,
      "deprecationInfo": "Use <code>renderValue</code> prop instead",
      "signature": {
        "type": "function(value: Array<Value>, getTagProps: function, ownerState: object) => ReactNode",
        "describedArgs": ["value", "getTagProps", "ownerState"]
      }
    },
    "renderValue": {
      "type": { "name": "func" },
      "signature": {
        "type": "function(value: AutocompleteRenderValue<Value, Multiple, FreeSolo>, getItemProps: function, ownerState: object) => ReactNode",
        "describedArgs": ["value", "getItemProps", "ownerState"]
      }
    },
    "selectOnFocus": { "type": { "name": "bool" }, "default": "!props.freeSolo" },
    "size": {
      "type": {
        "name": "union",
        "description": "'small'<br>&#124;&nbsp;'medium'<br>&#124;&nbsp;string"
      },
      "default": "'medium'"
    },
    "slotProps": {
      "type": {
        "name": "shape",
        "description": "{ chip?: func<br>&#124;&nbsp;object, clearIndicator?: func<br>&#124;&nbsp;object, listbox?: func<br>&#124;&nbsp;object, paper?: func<br>&#124;&nbsp;object, popper?: func<br>&#124;&nbsp;object, popupIndicator?: func<br>&#124;&nbsp;object }"
      },
      "default": "{}"
    },
    "slots": {
      "type": {
        "name": "shape",
        "description": "{ listbox?: elementType, paper?: elementType, popper?: elementType }"
      },
      "default": "{}"
    },
    "sx": {
      "type": {
        "name": "union",
        "description": "Array&lt;func<br>&#124;&nbsp;object<br>&#124;&nbsp;bool&gt;<br>&#124;&nbsp;func<br>&#124;&nbsp;object"
      },
      "additionalInfo": { "sx": true }
    },
    "value": { "type": { "name": "custom", "description": "any" } }
  },
  "name": "Autocomplete",
  "imports": [
    "import Autocomplete from '@mui/material/Autocomplete';",
    "import { Autocomplete } from '@mui/material';"
  ],
  "slots": [
    {
      "name": "listbox",
      "description": "The component used to render the listbox.",
      "default": "'ul'",
      "class": "MuiAutocomplete-listbox"
    },
    {
      "name": "paper",
      "description": "The component used to render the body of the popup.",
      "default": "Paper",
      "class": "MuiAutocomplete-paper"
    },
    {
      "name": "popper",
      "description": "The component used to position the popup.",
      "default": "Popper",
      "class": "MuiAutocomplete-popper"
    }
  ],
  "classes": [
    {
      "key": "clearIndicator",
      "className": "MuiAutocomplete-clearIndicator",
      "description": "Styles applied to the clear indicator.",
      "isGlobal": false
    },
    {
      "key": "endAdornment",
      "className": "MuiAutocomplete-endAdornment",
      "description": "Styles applied to the endAdornment element.",
      "isGlobal": false
    },
    {
      "key": "expanded",
      "className": "Mui-expanded",
      "description": "State class applied to the root element if the listbox is displayed.",
      "isGlobal": true
    },
    {
      "key": "focused",
      "className": "Mui-focused",
      "description": "State class applied to the root element if focused.",
      "isGlobal": true
    },
    {
      "key": "focusVisible",
      "className": "Mui-focusVisible",
      "description": "Styles applied to the option elements if they are keyboard focused.",
      "isGlobal": true
    },
    {
      "key": "fullWidth",
      "className": "MuiAutocomplete-fullWidth",
      "description": "Styles applied to the root element if `fullWidth={true}`.",
      "isGlobal": false
    },
    {
      "key": "groupLabel",
      "className": "MuiAutocomplete-groupLabel",
      "description": "Styles applied to the group's label elements.",
      "isGlobal": false
    },
    {
      "key": "groupUl",
      "className": "MuiAutocomplete-groupUl",
      "description": "Styles applied to the group's ul elements.",
      "isGlobal": false
    },
    {
      "key": "hasClearIcon",
      "className": "MuiAutocomplete-hasClearIcon",
      "description": "Styles applied when the clear icon is rendered.",
      "isGlobal": false
    },
    {
      "key": "hasPopupIcon",
      "className": "MuiAutocomplete-hasPopupIcon",
      "description": "Styles applied when the popup icon is rendered.",
      "isGlobal": false
    },
    {
      "key": "input",
      "className": "MuiAutocomplete-input",
      "description": "Styles applied to the input element.",
      "isGlobal": false
    },
    {
      "key": "inputFocused",
      "className": "MuiAutocomplete-inputFocused",
      "description": "Styles applied to the input element if the input is focused.",
      "isGlobal": false
    },
    {
      "key": "inputRoot",
      "className": "MuiAutocomplete-inputRoot",
      "description": "Styles applied to the Input element.",
      "isGlobal": false
    },
    {
      "key": "loading",
      "className": "MuiAutocomplete-loading",
      "description": "Styles applied to the loading wrapper.",
      "isGlobal": false
    },
    {
      "key": "noOptions",
      "className": "MuiAutocomplete-noOptions",
      "description": "Styles applied to the no option wrapper.",
      "isGlobal": false
    },
    {
      "key": "option",
      "className": "MuiAutocomplete-option",
      "description": "Styles applied to the option elements.",
      "isGlobal": false
    },
    {
      "key": "popperDisablePortal",
      "className": "MuiAutocomplete-popperDisablePortal",
      "description": "Styles applied to the popper element if `disablePortal={true}`.",
      "isGlobal": false
    },
    {
      "key": "popupIndicator",
      "className": "MuiAutocomplete-popupIndicator",
      "description": "Styles applied to the popup indicator.",
      "isGlobal": false
    },
    {
      "key": "popupIndicatorOpen",
      "className": "MuiAutocomplete-popupIndicatorOpen",
      "description": "Styles applied to the popup indicator if the popup is open.",
      "isGlobal": false
    },
    {
      "key": "root",
      "className": "MuiAutocomplete-root",
      "description": "Styles applied to the root element.",
      "isGlobal": false
    },
    {
      "key": "tag",
      "className": "MuiAutocomplete-tag",
      "description": "Styles applied to the tag elements, for example the chips.",
      "isGlobal": false
    },
    {
      "key": "tagSizeMedium",
      "className": "MuiAutocomplete-tagSizeMedium",
      "description": "Styles applied to the tag elements, for example the chips if `size=\"medium\"`.",
      "isGlobal": false
    },
    {
      "key": "tagSizeSmall",
      "className": "MuiAutocomplete-tagSizeSmall",
      "description": "Styles applied to the tag elements, for example the chips if `size=\"small\"`.",
      "isGlobal": false
    }
  ],
  "spread": true,
  "themeDefaultProps": true,
  "muiName": "MuiAutocomplete",
  "filename": "/packages/mui-material/src/Autocomplete/Autocomplete.js",
  "inheritance": null,
  "demos": "<ul><li><a href=\"/material-ui/react-autocomplete/\">Autocomplete</a></li></ul>",
  "cssComponent": false
}
