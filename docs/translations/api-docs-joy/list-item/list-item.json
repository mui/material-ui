{
  "componentDescription": "",
  "propDescriptions": {
    "children": { "description": "The content of the component." },
    "color": {
      "description": "The color of the component. It supports those theme colors that make sense for this component."
    },
    "component": {
      "description": "The component used for the root node. Either a string to use a HTML element or a component."
    },
    "endAction": { "description": "The element to display at the end of ListItem." },
    "nested": { "description": "If <code>true</code>, the component can contain NestedList." },
    "slotProps": { "description": "The props used for each slot inside." },
    "slots": { "description": "The components used for each slot inside." },
    "startAction": { "description": "The element to display at the start of ListItem." },
    "sticky": {
      "description": "If <code>true</code>, the component has sticky position (with top = 0)."
    },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles."
    },
    "variant": {
      "description": "The <a href=\"https://mui.com/joy-ui/main-features/global-variants/\">global variant</a> to use."
    }
  },
  "classDescriptions": {
    "colorContext": {
      "description": "Class name applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "color inversion is triggered"
    },
    "colorDanger": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"danger\"</code>"
    },
    "colorNeutral": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"neutral\"</code>"
    },
    "colorPrimary": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"primary\"</code>"
    },
    "colorSuccess": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"success\"</code>"
    },
    "colorWarning": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"warning\"</code>"
    },
    "nested": {
      "description": "Class name applied to {{nodeName}}, {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "if nested={true}"
    },
    "nesting": {
      "description": "Class name applied to {{nodeName}}, {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "if it is under a nested list item"
    },
    "sticky": {
      "description": "Class name applied to {{nodeName}}, {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "if sticky={true}"
    },
    "variantOutlined": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"outlined\"</code>"
    },
    "variantPlain": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"plain\"</code>"
    },
    "variantSoft": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"soft\"</code>"
    },
    "variantSolid": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"solid\"</code>"
    }
  },
  "slotDescriptions": {
    "endAction": "The component that renders the end action.",
    "root": "The component that renders the root.",
    "startAction": "The component that renders the start action."
  }
}
