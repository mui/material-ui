{
  "hookDescription": "",
  "parametersDescriptions": {
    "componentName": {
      "description": "The name of the component using useNumberInput. For debugging purposes."
    },
    "defaultValue": {
      "description": "The default value. Use when the component is not controlled."
    },
    "disabled": {
      "description": "If <code>true</code>, the component is disabled. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component."
    },
    "error": {
      "description": "If <code>true</code>, the <code>input</code> will indicate an error by setting the <code>aria-invalid</code> attribute. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component."
    },
    "inputId": { "description": "The <code>id</code> attribute of the input element." },
    "inputRef": { "description": "The ref of the input element." },
    "max": { "description": "The maximum value." },
    "min": { "description": "The minimum value." },
    "onChange": {
      "description": "Callback fired after the value is clamped and changes - when the <code>input</code> is blurred or when the stepper buttons are triggered. Called with <code>undefined</code> when the value is unset."
    },
    "onInputChange": {
      "description": "Callback fired when the <code>input</code> value changes after each keypress, before clamping is applied. Note that <code>event.target.value</code> may contain values that fall outside of <code>min</code> and <code>max</code> or are otherwise &quot;invalid&quot;."
    },
    "readOnly": {
      "description": "If <code>true</code>, the <code>input</code> element becomes read-only. The stepper buttons remain active, with the addition that they are now keyboard focusable."
    },
    "required": {
      "description": "If <code>true</code>, the <code>input</code> element is required. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component."
    },
    "shiftMultiplier": {
      "description": "Multiplier applied to <code>step</code> if the shift key is held while incrementing or decrementing the value. Defaults to <code>10</code>."
    },
    "step": { "description": "The amount that the value changes on each increment or decrement." },
    "value": { "description": "The current value. Use when the component is controlled." }
  },
  "returnValueDescriptions": {
    "disabled": { "description": "If <code>true</code>, the component will be disabled." },
    "error": {
      "description": "If <code>true</code>, the <code>input</code> will indicate an error by setting the <code>aria-invalid</code> attribute."
    },
    "focused": { "description": "If <code>true</code>, the <code>input</code> will be focused." },
    "formControlContext": {
      "description": "Return value from the <code>useFormControlContext</code> hook."
    },
    "getDecrementButtonProps": {
      "description": "Resolver for the decrement button slot&#39;s props."
    },
    "getIncrementButtonProps": {
      "description": "Resolver for the increment button slot&#39;s props."
    },
    "getInputProps": { "description": "Resolver for the input slot&#39;s props." },
    "getRootProps": { "description": "Resolver for the root slot&#39;s props." },
    "inputValue": {
      "description": "The dirty <code>value</code> of the <code>input</code> element when it is in focus."
    },
    "isDecrementDisabled": {
      "description": "If <code>true</code>, the decrement button will be disabled. e.g. when the <code>value</code> is already at <code>min</code>"
    },
    "isIncrementDisabled": {
      "description": "If <code>true</code>, the increment button will be disabled. e.g. when the <code>value</code> is already at <code>max</code>"
    },
    "required": {
      "description": "If <code>true</code>, the <code>input</code> will indicate that it&#39;s required."
    },
    "value": { "description": "The clamped <code>value</code> of the <code>input</code> element." }
  }
}
