{
  "hookDescription": "",
  "parametersDescriptions": {
    "areOptionsEqual": {
      "description": "A function used to determine if two options&#39; values are equal. By default, reference equality is used.<br>There is a performance impact when using the <code>areOptionsEqual</code> prop (proportional to the number of options). Therefore, it&#39;s recommented to use the default reference equality comparison whenever possible."
    },
    "buttonRef": { "description": "The ref of the trigger button element." },
    "componentName": {
      "description": "The name of the component using useSelect. For debugging purposes."
    },
    "defaultOpen": { "description": "If <code>true</code>, the select will be open by default." },
    "defaultValue": {
      "description": "The default selected value. Use when the component is not controlled."
    },
    "disabled": { "description": "If <code>true</code>, the select is disabled." },
    "getOptionAsString": {
      "description": "A function used to convert the option label to a string. This is useful when labels are elements and need to be converted to plain text to enable keyboard navigation with character keys."
    },
    "getSerializedValue": {
      "description": "A function to convert the currently selected value to a string. Used to set a value of a hidden input associated with the select, so that the selected value can be posted with a form."
    },
    "listboxId": { "description": "The <code>id</code> attribute of the listbox element." },
    "listboxRef": { "description": "The ref of the listbox element." },
    "multiple": {
      "description": "If <code>true</code>, the end user can select multiple values. This affects the type of the <code>value</code>, <code>defaultValue</code>, and <code>onChange</code> props."
    },
    "name": {
      "description": "The <code>name</code> attribute of the hidden input element. This is useful when the select is embedded in a form and you want to access the selected value in the form data."
    },
    "onChange": { "description": "Callback fired when an option is selected." },
    "onHighlightChange": { "description": "Callback fired when an option is highlighted." },
    "onOpenChange": { "description": "Callback fired when the listbox is opened or closed." },
    "open": {
      "description": "Controls the open state of the select&#39;s listbox. This is the controlled equivalent of the <code>defaultOpen</code> prop."
    },
    "options": {
      "description": "An alternative way to specify the options. If this parameter is set, options defined as JSX children are ignored."
    },
    "required": {
      "description": "If <code>true</code>, the select embedded in a form must have a selected value. Otherwise, the form submission will fail."
    },
    "value": {
      "description": "The selected value. Set to <code>null</code> to deselect all options."
    }
  },
  "returnValueDescriptions": {
    "buttonActive": {
      "description": "If <code>true</code>, the trigger button is active (pressed)."
    },
    "buttonFocusVisible": {
      "description": "If <code>true</code>, the trigger button has a visible focus."
    },
    "buttonRef": { "description": "Ref to the button slot DOM node." },
    "contextValue": {
      "description": "A value to be passed to the <code>SelectProvider</code> component."
    },
    "disabled": { "description": "If <code>true</code>, the select is disabled." },
    "dispatch": {
      "description": "Action dispatcher for the select component. Allows to programmatically control the select."
    },
    "getButtonProps": { "description": "Resolver for the button slot&#39;s props." },
    "getHiddenInputProps": { "description": "Resolver for the hidden input slot&#39;s props." },
    "getListboxProps": { "description": "Resolver for the listbox slot&#39;s props." },
    "getOptionMetadata": {
      "description": "A function that returns the metadata of an option with a given value."
    },
    "highlightedOption": { "description": "The value of the highlighted option." },
    "listboxRef": { "description": "Ref to the listbox slot DOM node." },
    "open": { "description": "If <code>true</code>, the listbox is open." },
    "options": { "description": "Values of all the registered options." },
    "value": { "description": "The value of the selected option(s)." }
  }
}
