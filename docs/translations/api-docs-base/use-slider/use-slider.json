{
  "hookDescription": "",
  "parametersDescriptions": {
    "aria-labelledby": {
      "description": "The id of the element containing a label for the slider."
    },
    "defaultValue": {
      "description": "The default value. Use when the component is not controlled."
    },
    "disabled": { "description": "If <code>true</code>, the component is disabled." },
    "disableSwap": {
      "description": "If <code>true</code>, the active thumb doesn&#39;t swap when moving pointer over a thumb while dragging another thumb."
    },
    "isRtl": {
      "description": "If <code>true</code> the Slider will be rendered right-to-left (with the lowest value on the right-hand side)."
    },
    "marks": {
      "description": "Marks indicate predetermined values to which the user can move the slider. If <code>true</code> the marks are spaced according the value of the <code>step</code> prop. If an array, it should contain objects with <code>value</code> and an optional <code>label</code> keys."
    },
    "max": {
      "description": "The maximum allowed value of the slider. Should not be equal to min."
    },
    "min": {
      "description": "The minimum allowed value of the slider. Should not be equal to max."
    },
    "name": { "description": "Name attribute of the hidden <code>input</code> element." },
    "onChange": {
      "description": "Callback function that is fired when the slider&#39;s value changed."
    },
    "onChangeCommitted": {
      "description": "Callback function that is fired when the <code>mouseup</code> is triggered."
    },
    "orientation": { "description": "The component orientation." },
    "rootRef": { "description": "The ref attached to the root of the Slider." },
    "scale": { "description": "A transformation function, to change the scale of the slider." },
    "shiftStep": {
      "description": "The granularity with which the slider can step through values when using Page Up/Page Down or Shift + Arrow Up/Arrow Down."
    },
    "step": {
      "description": "The granularity with which the slider can step through values. (A &quot;discrete&quot; slider.) The <code>min</code> prop serves as the origin for the valid values. We recommend (max - min) to be evenly divisible by the step.<br>When step is <code>null</code>, the thumb can only be slid onto marks provided with the <code>marks</code> prop."
    },
    "tabIndex": { "description": "Tab index attribute of the hidden <code>input</code> element." },
    "value": {
      "description": "The value of the slider. For ranged sliders, provide an array with two values."
    }
  },
  "returnValueDescriptions": {
    "active": { "description": "The active index of the slider." },
    "axis": { "description": "The orientation of the slider." },
    "axisProps": {
      "description": "Returns the <code>offset</code> and <code>leap</code> methods to calculate the positioning styles based on the slider axis."
    },
    "dragging": { "description": "If <code>true</code>, the slider is being dragged." },
    "focusedThumbIndex": {
      "description": "The index of the thumb which is focused on the slider."
    },
    "getHiddenInputProps": { "description": "Resolver for the hidden input slot&#39;s props." },
    "getRootProps": { "description": "Resolver for the root slot&#39;s props." },
    "getThumbProps": { "description": "Resolver for the thumb slot&#39;s props." },
    "getThumbStyle": { "description": "Resolver for the thumb slot&#39;s style prop." },
    "marks": {
      "description": "The marks of the slider. Marks indicate predetermined values to which the user can move the slider."
    },
    "open": { "description": "The thumb index for the current value when in hover state." },
    "range": {
      "description": "If <code>true</code>, the slider is a range slider when the <code>value</code> prop passed is an array."
    },
    "rootRef": { "description": "Ref to the root slot&#39;s DOM node." },
    "trackLeap": { "description": "The track leap for the current value of the slider." },
    "trackOffset": { "description": "The track offset for the current value of the slider." },
    "values": { "description": "The possible values of the slider." }
  }
}
