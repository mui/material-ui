{
  "componentDescription": "The foundation for building custom-styled select components.",
  "propDescriptions": {
    "areOptionsEqual": {
      "description": "A function used to determine if two options&#39; values are equal. By default, reference equality is used.<br>There is a performance impact when using the <code>areOptionsEqual</code> prop (proportional to the number of options). Therefore, it&#39;s recommended to use the default reference equality comparison whenever possible."
    },
    "autoComplete": {
      "description": "This prop helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it&#39;s more like an autofill. You can learn more about it <a href=\"https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\">following the specification</a>."
    },
    "autoFocus": {
      "description": "If <code>true</code>, the select element is focused during the first mount"
    },
    "defaultListboxOpen": {
      "description": "If <code>true</code>, the select will be initially open."
    },
    "defaultValue": {
      "description": "The default selected value. Use when the component is not controlled."
    },
    "disabled": { "description": "If <code>true</code>, the select is disabled." },
    "getOptionAsString": {
      "description": "A function used to convert the option label to a string. It&#39;s useful when labels are elements and need to be converted to plain text to enable navigation using character keys on a keyboard."
    },
    "getSerializedValue": {
      "description": "A function to convert the currently selected value to a string. Used to set a value of a hidden input associated with the select, so that the selected value can be posted with a form."
    },
    "listboxId": { "description": "<code>id</code> attribute of the listbox element." },
    "listboxOpen": { "description": "Controls the open state of the select&#39;s listbox." },
    "multiple": {
      "description": "If <code>true</code>, selecting multiple values is allowed. This affects the type of the <code>value</code>, <code>defaultValue</code>, and <code>onChange</code> props."
    },
    "name": {
      "description": "Name of the element. For example used by the server to identify the fields in form submits."
    },
    "onChange": { "description": "Callback fired when an option is selected." },
    "onListboxOpenChange": {
      "description": "Callback fired when the component requests to be opened. Use in controlled mode (see listboxOpen)."
    },
    "placeholder": { "description": "Text to show when there is no selected value." },
    "renderValue": {
      "description": "Function that customizes the rendering of the selected value."
    },
    "required": {
      "description": "If <code>true</code>, the Select cannot be empty when submitting form."
    },
    "slotProps": { "description": "The props used for each slot inside the Input." },
    "slots": {
      "description": "The components used for each slot inside the Select. Either a string to use a HTML element or a component."
    },
    "value": {
      "description": "The selected value. Set to <code>null</code> to deselect all options."
    }
  },
  "classDescriptions": {
    "active": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root <code>button</code> element",
      "conditions": "<code>active={true}</code>"
    },
    "disabled": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root <code>button</code> element and the listbox &#39;ul&#39; element",
      "conditions": "<code>disabled={true}</code>"
    },
    "expanded": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root <code>button</code> element",
      "conditions": "<code>expanded={true}</code>"
    },
    "focusVisible": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root <code>button</code> element",
      "conditions": "<code>focusVisible={true}</code>"
    }
  },
  "slotDescriptions": {
    "listbox": "The component that renders the listbox.",
    "popup": "The component that wraps the popup.",
    "root": "The component that renders the root."
  }
}
