{
  "hookDescription": "",
  "parametersDescriptions": {
    "autoComplete": {
      "description": "If <code>true</code>, the portion of the selected suggestion that the user hasn&#39;t typed, known as the completion string, appears inline after the input cursor in the textbox. The inline completion string is visually highlighted and has a selected state."
    },
    "autoHighlight": {
      "description": "If <code>true</code>, the first option is automatically highlighted."
    },
    "autoSelect": {
      "description": "If <code>true</code>, the selected option becomes the value of the input when the Autocomplete loses focus unless the user chooses a different option or changes the character string in the input.<br>When using the <code>freeSolo</code> mode, the typed value will be the input value if the Autocomplete loses focus without highlighting an option."
    },
    "blurOnSelect": {
      "description": "<p>Control if the input should be blurred when an option is selected:</p>\n<ul>\n<li><code>false</code> the input is not blurred.</li>\n<li><code>true</code> the input is always blurred.</li>\n<li><code>touch</code> the input is blurred after a touch event.</li>\n<li><code>mouse</code> the input is blurred after a mouse event.</li>\n</ul>\n"
    },
    "clearOnBlur": {
      "description": "If <code>true</code>, the input&#39;s text is cleared on blur if no value is selected.<br>Set it to <code>true</code> if you want to help the user enter a new value. Set it to <code>false</code> if you want to help the user resume their search."
    },
    "clearOnEscape": {
      "description": "If <code>true</code>, clear all values when the user presses escape and the popup is closed."
    },
    "componentName": {
      "description": "The component name that is using this hook. Used for warnings."
    },
    "defaultValue": {
      "description": "The default value. Use when the component is not controlled."
    },
    "disableClearable": { "description": "If <code>true</code>, the input can&#39;t be cleared." },
    "disableCloseOnSelect": {
      "description": "If <code>true</code>, the popup won&#39;t close when a value is selected."
    },
    "disabled": { "description": "If <code>true</code>, the component is disabled." },
    "disabledItemsFocusable": {
      "description": "If <code>true</code>, will allow focus on disabled items."
    },
    "disableListWrap": {
      "description": "If <code>true</code>, the list box in the popup will not wrap focus."
    },
    "filterOptions": {
      "description": "A function that determines the filtered options to be rendered on search."
    },
    "filterSelectedOptions": {
      "description": "If <code>true</code>, hide the selected options from the list box."
    },
    "freeSolo": {
      "description": "If <code>true</code>, the Autocomplete is free solo, meaning that the user input is not bound to provided options."
    },
    "getOptionDisabled": {
      "description": "Used to determine the disabled state for a given option."
    },
    "getOptionKey": {
      "description": "Used to determine the key for a given option. This can be useful when the labels of options are not unique (since labels are used as keys by default)."
    },
    "getOptionLabel": {
      "description": "Used to determine the string value for a given option. It&#39;s used to fill the input (and the list box options if <code>renderOption</code> is not provided).<br>If used in free solo mode, it must accept both the type of the options and a string."
    },
    "groupBy": {
      "description": "If provided, the options will be grouped under the returned string. The groupBy value is also used as the text for group headings when <code>renderGroup</code> is not provided."
    },
    "handleHomeEndKeys": {
      "description": "If <code>true</code>, the component handles the &quot;Home&quot; and &quot;End&quot; keys when the popup is open. It should move focus to the first option and last option, respectively."
    },
    "id": {
      "description": "This prop is used to help implement the accessibility logic. If you don&#39;t provide an id it will fall back to a randomly generated one."
    },
    "includeInputInList": {
      "description": "If <code>true</code>, the highlight can move to the input."
    },
    "inputValue": { "description": "The input value." },
    "isOptionEqualToValue": {
      "description": "Used to determine if the option represents the given value. Uses strict equality by default. ⚠️ Both arguments need to be handled, an option can only match with one value."
    },
    "multiple": {
      "description": "If <code>true</code>, <code>value</code> must be an array and the menu will support multiple selections."
    },
    "onChange": { "description": "Callback fired when the value changes." },
    "onClose": {
      "description": "Callback fired when the popup requests to be closed. Use in controlled mode (see open)."
    },
    "onHighlightChange": { "description": "Callback fired when the highlight option changes." },
    "onInputChange": { "description": "Callback fired when the input value changes." },
    "onOpen": {
      "description": "Callback fired when the popup requests to be opened. Use in controlled mode (see open)."
    },
    "open": { "description": "If <code>true</code>, the component is shown." },
    "openOnFocus": { "description": "If <code>true</code>, the popup will open on input focus." },
    "options": { "description": "Array of options." },
    "readOnly": {
      "description": "If <code>true</code>, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted."
    },
    "selectOnFocus": {
      "description": "If <code>true</code>, the input&#39;s text is selected on focus. It helps the user clear the selected value."
    },
    "value": {
      "description": "The value of the autocomplete.<br>The value must have reference equality with the option in order to be selected. You can customize the equality behavior with the <code>isOptionEqualToValue</code> prop."
    }
  },
  "returnValueDescriptions": {
    "anchorEl": {
      "description": "An HTML element that is used to set the position of the component."
    },
    "dirty": { "description": "If <code>true</code>, the component input has some values." },
    "expanded": { "description": "If <code>true</code>, the listbox is being displayed." },
    "focused": { "description": "If <code>true</code>, the component is focused." },
    "focusedTag": { "description": "Index of the focused tag for the component." },
    "getClearProps": {
      "description": "Resolver for the <code>clear</code> button element&#39;s props."
    },
    "getInputLabelProps": { "description": "Resolver for the input label element&#39;s props." },
    "getInputProps": { "description": "Resolver for the input element&#39;s props." },
    "getListboxProps": { "description": "Resolver for the listbox component&#39;s props." },
    "getOptionProps": { "description": "Resolver for the rendered option element&#39;s props." },
    "getPopupIndicatorProps": { "description": "Resolver for the popup icon&#39;s props." },
    "getRootProps": { "description": "Resolver for the root slot&#39;s props." },
    "getTagProps": { "description": "A tag props getter." },
    "groupedOptions": {
      "description": "The options to render. It&#39;s either <code>Value[]</code> or <code>AutocompleteGroupedOption&lt;Value&gt;[]</code> if the groupBy prop is provided."
    },
    "id": { "description": "Id for the Autocomplete." },
    "inputValue": { "description": "The input value." },
    "popupOpen": { "description": "If <code>true</code>, the popup is open on the component." },
    "setAnchorEl": { "description": "Setter for the component <code>anchorEl</code>." },
    "value": { "description": "The value of the autocomplete." }
  }
}
