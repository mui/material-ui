{
  "componentDescription": "",
  "propDescriptions": {
    "action": {
      "description": "Callback fired when the component mounts. This is useful when you want to trigger an action programmatically. It supports two actions: <code>updateIndicator()</code> and <code>updateScrollButtons()</code>"
    },
    "allowScrollButtonsMobile": {
      "description": "If <code>true</code>, the scroll buttons aren&#39;t forced hidden on mobile. By default the scroll buttons are hidden on mobile and takes precedence over <code>scrollButtons</code>."
    },
    "aria-label": { "description": "The label for the Tabs as a string." },
    "aria-labelledby": {
      "description": "An id or list of ids separated by a space that label the Tabs."
    },
    "centered": {
      "description": "If <code>true</code>, the tabs are centered. This prop is intended for large views."
    },
    "children": { "description": "The content of the component." },
    "classes": { "description": "Override or extend the styles applied to the component." },
    "component": {
      "description": "The component used for the root node. Either a string to use a HTML element or a component."
    },
    "indicatorColor": { "description": "Determines the color of the indicator." },
    "onChange": {
      "description": "Callback fired when the value changes.",
      "typeDescriptions": {
        "event": {
          "name": "event",
          "description": "The event source of the callback. <strong>Warning</strong>: This is a generic event not a change event."
        },
        "value": { "name": "value", "description": "We default to the index of the child (number)" }
      }
    },
    "orientation": { "description": "The component orientation (layout flow direction)." },
    "ScrollButtonComponent": { "description": "The component used to render the scroll buttons." },
    "scrollButtons": {
      "description": "<p>Determine behavior of scroll buttons when tabs are set to scroll:</p>\n<ul>\n<li><code>auto</code> will only present them when not all the items are visible.</li>\n<li><code>true</code> will always present them.</li>\n<li><code>false</code> will never present them.</li>\n</ul>\n<p>By default the scroll buttons are hidden on mobile.\nThis behavior can be disabled with <code>allowScrollButtonsMobile</code>.</p>\n"
    },
    "selectionFollowsFocus": {
      "description": "If <code>true</code> the selected tab changes on focus. Otherwise it only changes on activation."
    },
    "slotProps": { "description": "The props used for each slot inside." },
    "slots": { "description": "The components used for each slot inside." },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles."
    },
    "TabIndicatorProps": { "description": "Props applied to the tab indicator element." },
    "TabScrollButtonProps": {
      "description": "Props applied to the <a href=\"https://mui.com/material-ui/api/tab-scroll-button/\"><code>TabScrollButton</code></a> element."
    },
    "textColor": { "description": "Determines the color of the <code>Tab</code>." },
    "value": {
      "description": "The value of the currently selected <code>Tab</code>. If you don&#39;t want any selected <code>Tab</code>, you can set this prop to <code>false</code>."
    },
    "variant": {
      "description": "<p>Determines additional display behavior of the tabs:</p>\n<ul>\n<li><code>scrollable</code> will invoke scrolling properties and allow for horizontally\n scrolling (or swiping) of the tab bar.</li>\n<li><code>fullWidth</code> will make the tabs grow to use all the available space,\n which should be used for small views, like on mobile.</li>\n<li><code>standard</code> will render the default state.</li>\n</ul>\n"
    },
    "visibleScrollbar": {
      "description": "If <code>true</code>, the scrollbar is visible. It can be useful when displaying a long vertical list of tabs."
    }
  },
  "classDescriptions": {
    "centered": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the flex container element",
      "conditions": "<code>centered={true}</code> &amp; <code>!variant=\"scrollable\"</code>"
    },
    "fixed": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the tablist element",
      "conditions": "<code>!variant=\"scrollable\"</code>\b\b\b"
    },
    "flexContainer": {
      "description": "",
      "deprecationInfo": "use <code>list</code> instead. See <a href=\"/material-ui/migration/migrating-from-deprecated-apis/\">Migrating from deprecated APIs</a> for more details."
    },
    "flexContainerVertical": {
      "description": "",
      "deprecationInfo": "use a combination of <code>list</code> and <code>vertical</code> instead. See <a href=\"/material-ui/migration/migrating-from-deprecated-apis/\">Migrating from deprecated APIs</a> for more details."
    },
    "hideScrollbar": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the tablist element",
      "conditions": "<code>variant=\"scrollable\"</code> and <code>visibleScrollbar={false}</code>"
    },
    "scrollableX": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the tablist element",
      "conditions": "<code>variant=\"scrollable\"</code> and <code>orientation=\"horizontal\"</code>"
    },
    "scrollableY": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the tablist element",
      "conditions": "<code>variant=\"scrollable\"</code> and <code>orientation=\"vertical\"</code>"
    },
    "scrollButtonsHideMobile": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the ScrollButtonComponent component",
      "conditions": "<code>allowScrollButtonsMobile={true}</code>"
    },
    "vertical": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>orientation=\"vertical\"</code>"
    }
  },
  "slotDescriptions": {
    "endScrollButtonIcon": "The component used for the end scroll button icon.",
    "indicator": "The component used for the tab indicator.",
    "list": "The component used for the flex container.",
    "root": "The component used for the popper.",
    "scrollbar": "The component used for the scroller.",
    "scrollButtons": "The component used for the scroll button.",
    "scroller": "The component used for the scroller.",
    "startScrollButtonIcon": "The component used for the start scroll button icon."
  }
}
