{
  "componentDescription": "",
  "propDescriptions": {
    "children": { "description": "The content of the component." },
    "classes": { "description": "Override or extend the styles applied to the component." },
    "expandIcon": { "description": "The icon to display as the expand indicator." },
    "focusVisibleClassName": {
      "description": "This prop can help identify which element has keyboard focus. The class name will be applied when the element gains the focus through keyboard interaction. It&#39;s a polyfill for the <a href=\"https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo\">CSS :focus-visible selector</a>. The rationale for using this feature <a href=\"https://github.com/WICG/focus-visible/blob/HEAD/explainer.md\">is explained here</a>. A <a href=\"https://github.com/WICG/focus-visible\">polyfill can be used</a> to apply a <code>focus-visible</code> class to other components if needed."
    },
    "slotProps": { "description": "The props used for each slot inside." },
    "slots": { "description": "The components used for each slot inside." },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles."
    }
  },
  "classDescriptions": {
    "contentGutters": {
      "description": "Styles applied to {{nodeName}} unless {{conditions}}.",
      "nodeName": "the children wrapper element",
      "conditions": "<code>disableGutters={true}</code>",
      "deprecationInfo": "Combine the <a href=\"/material-ui/api/accordion-summary/#AccordionSummary-classes-gutters\">.MuiAccordionSummary-gutters</a> and <a href=\"/material-ui/api/accordion-summary/#AccordionSummary-classes-content\">.MuiAccordionSummary-content</a> classes instead. See <a href=\"/material-ui/migration/migrating-from-deprecated-apis/\">Migrating from deprecated APIs</a> for more details."
    },
    "disabled": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>disabled={true}</code>"
    },
    "expanded": {
      "description": "State class applied to {{nodeName}}, {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "children wrapper element and <code>IconButton</code> component if <code>expanded={true}</code>"
    },
    "focusVisible": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the ButtonBase root element",
      "conditions": "the button is keyboard focused"
    },
    "gutters": {
      "description": "Styles applied to {{nodeName}} unless {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>disableGutters={true}</code>"
    }
  },
  "slotDescriptions": {
    "content": "The component that renders the content slot.",
    "expandIconWrapper": "The component that renders the expand icon wrapper slot.",
    "root": "The component that renders the root slot."
  }
}
