{
  "componentDescription": "",
  "propDescriptions": {
    "autoComplete": "If <code>true</code>, the portion of the selected suggestion that has not been typed by the user, known as the completion string, appears inline after the input cursor in the textbox. The inline completion string is visually highlighted and has a selected state.",
    "autoHighlight": "If <code>true</code>, the first option is automatically highlighted.",
    "autoSelect": "If <code>true</code>, the selected option becomes the value of the input when the Autocomplete loses focus unless the user chooses a different option or changes the character string in the input.",
    "blurOnSelect": "Control if the input should be blurred when an option is selected:<br>- <code>false</code> the input is not blurred. - <code>true</code> the input is always blurred. - <code>touch</code> the input is blurred after a touch event. - <code>mouse</code> the input is blurred after a mouse event.",
    "ChipProps": "Props applied to the <a href=\"/material-ui/api/chip/\"><code>Chip</code></a> element.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "clearIcon": "The icon to display in place of the default clear icon.",
    "clearOnBlur": "If <code>true</code>, the input&#39;s text is cleared on blur if no value is selected.<br>Set to <code>true</code> if you want to help the user enter a new value. Set to <code>false</code> if you want to help the user resume their search.",
    "clearOnEscape": "If <code>true</code>, clear all values when the user presses escape and the popup is closed.",
    "clearText": "Override the default text for the <em>clear</em> icon button.<br>For localization purposes, you can use the provided <a href=\"/material-ui/guides/localization/\">translations</a>.",
    "closeText": "Override the default text for the <em>close popup</em> icon button.<br>For localization purposes, you can use the provided <a href=\"/material-ui/guides/localization/\">translations</a>.",
    "componentsProps": "The props used for each slot inside.",
    "defaultValue": "The default value. Use when the component is not controlled.",
    "disableClearable": "If <code>true</code>, the input can&#39;t be cleared.",
    "disableCloseOnSelect": "If <code>true</code>, the popup won&#39;t close when a value is selected.",
    "disabled": "If <code>true</code>, the component is disabled.",
    "disabledItemsFocusable": "If <code>true</code>, will allow focus on disabled items.",
    "disableListWrap": "If <code>true</code>, the list box in the popup will not wrap focus.",
    "disablePortal": "If <code>true</code>, the <code>Popper</code> content will be under the DOM hierarchy of the parent component.",
    "filterOptions": "A function that determines the filtered options to be rendered on search.<br><br><strong>Signature:</strong><br><code>function(options: Array&lt;T&gt;, state: object) =&gt; Array&lt;T&gt;</code><br><em>options:</em> The options to render.<br><em>state:</em> The state of the component.",
    "filterSelectedOptions": "If <code>true</code>, hide the selected options from the list box.",
    "forcePopupIcon": "Force the visibility display of the popup icon.",
    "freeSolo": "If <code>true</code>, the Autocomplete is free solo, meaning that the user input is not bound to provided options.",
    "fullWidth": "If <code>true</code>, the input will take up the full width of its container.",
    "getLimitTagsText": "The label to display when the tags are truncated (<code>limitTags</code>).<br><br><strong>Signature:</strong><br><code>function(more: number) =&gt; ReactNode</code><br><em>more:</em> The number of truncated tags.",
    "getOptionDisabled": "Used to determine the disabled state for a given option.<br><br><strong>Signature:</strong><br><code>function(option: T) =&gt; boolean</code><br><em>templates:</em> <span class=\"info-block\" title=\"The option shape. Will be the same shape as an item of the options.\"><code>T</code></span>.<br><em>option:</em> The option to test.",
    "getOptionLabel": "Used to determine the string value for a given option. It&#39;s used to fill the input (and the list box options if <code>renderOption</code> is not provided).<br>If used in free solo mode, it must accept both the type of the options and a string.<br><br><strong>Signature:</strong><br><code>function(option: T) =&gt; string</code><br>",
    "groupBy": "If provided, the options will be grouped under the returned string. The groupBy value is also used as the text for group headings when <code>renderGroup</code> is not provided.<br><br><strong>Signature:</strong><br><code>function(options: T) =&gt; string</code><br><em>options:</em> The options to group.",
    "handleHomeEndKeys": "If <code>true</code>, the component handles the &quot;Home&quot; and &quot;End&quot; keys when the popup is open. It should move focus to the first option and last option, respectively.",
    "id": "This prop is used to help implement the accessibility logic. If you don&#39;t provide an id it will fall back to a randomly generated one.",
    "includeInputInList": "If <code>true</code>, the highlight can move to the input.",
    "inputValue": "The input value.",
    "isOptionEqualToValue": "Used to determine if the option represents the given value. Uses strict equality by default. ⚠️ Both arguments need to be handled, an option can only match with one value.<br><br><strong>Signature:</strong><br><code>function(option: T, value: T) =&gt; boolean</code><br><em>option:</em> The option to test.<br><em>value:</em> The value to test against.",
    "limitTags": "The maximum number of tags that will be visible when not focused. Set <code>-1</code> to disable the limit.",
    "ListboxComponent": "The component used to render the listbox.",
    "ListboxProps": "Props applied to the Listbox element.",
    "loading": "If <code>true</code>, the component is in a loading state. This shows the <code>loadingText</code> in place of suggestions (only if there are no suggestions to show, e.g. <code>options</code> are empty).",
    "loadingText": "Text to display when in a loading state.<br>For localization purposes, you can use the provided <a href=\"/material-ui/guides/localization/\">translations</a>.",
    "multiple": "If <code>true</code>, <code>value</code> must be an array and the menu will support multiple selections.",
    "noOptionsText": "Text to display when there are no options.<br>For localization purposes, you can use the provided <a href=\"/material-ui/guides/localization/\">translations</a>.",
    "onChange": "Callback fired when the value changes.<br><br><strong>Signature:</strong><br><code>function(event: React.SyntheticEvent, value: T | Array&lt;T&gt;, reason: string, details?: string) =&gt; void</code><br><em>event:</em> The event source of the callback.<br><em>value:</em> The new value of the component.<br><em>reason:</em> One of &quot;createOption&quot;, &quot;selectOption&quot;, &quot;removeOption&quot;, &quot;blur&quot; or &quot;clear&quot;.",
    "onClose": "Callback fired when the popup requests to be closed. Use in controlled mode (see open).<br><br><strong>Signature:</strong><br><code>function(event: React.SyntheticEvent, reason: string) =&gt; void</code><br><em>event:</em> The event source of the callback.<br><em>reason:</em> Can be: <code>&quot;toggleInput&quot;</code>, <code>&quot;escape&quot;</code>, <code>&quot;selectOption&quot;</code>, <code>&quot;removeOption&quot;</code>, <code>&quot;blur&quot;</code>.",
    "onHighlightChange": "Callback fired when the highlight option changes.<br><br><strong>Signature:</strong><br><code>function(event: React.SyntheticEvent, option: T, reason: string) =&gt; void</code><br><em>event:</em> The event source of the callback.<br><em>option:</em> The highlighted option.<br><em>reason:</em> Can be: <code>&quot;keyboard&quot;</code>, <code>&quot;auto&quot;</code>, <code>&quot;mouse&quot;</code>.",
    "onInputChange": "Callback fired when the input value changes.<br><br><strong>Signature:</strong><br><code>function(event: React.SyntheticEvent, value: string, reason: string) =&gt; void</code><br><em>event:</em> The event source of the callback.<br><em>value:</em> The new value of the text input.<br><em>reason:</em> Can be: <code>&quot;input&quot;</code> (user input), <code>&quot;reset&quot;</code> (programmatic change), <code>&quot;clear&quot;</code>.",
    "onOpen": "Callback fired when the popup requests to be opened. Use in controlled mode (see open).<br><br><strong>Signature:</strong><br><code>function(event: React.SyntheticEvent) =&gt; void</code><br><em>event:</em> The event source of the callback.",
    "open": "If <code>true</code>, the component is shown.",
    "openOnFocus": "If <code>true</code>, the popup will open on input focus.",
    "openText": "Override the default text for the <em>open popup</em> icon button.<br>For localization purposes, you can use the provided <a href=\"/material-ui/guides/localization/\">translations</a>.",
    "options": "Array of options.",
    "PaperComponent": "The component used to render the body of the popup.",
    "PopperComponent": "The component used to position the popup.",
    "popupIcon": "The icon to display in place of the default popup icon.",
    "readOnly": "If <code>true</code>, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.",
    "renderGroup": "Render the group.<br><br><strong>Signature:</strong><br><code>function(params: AutocompleteRenderGroupParams) =&gt; ReactNode</code><br><em>params:</em> The group to render.",
    "renderInput": "Render the input.<br><br><strong>Signature:</strong><br><code>function(params: object) =&gt; ReactNode</code><br>",
    "renderOption": "Render the option, use <code>getOptionLabel</code> by default.<br><br><strong>Signature:</strong><br><code>function(props: object, option: T, state: object) =&gt; ReactNode</code><br><em>props:</em> The props to apply on the li element.<br><em>option:</em> The option to render.<br><em>state:</em> The state of the component.",
    "renderTags": "Render the selected value.<br><br><strong>Signature:</strong><br><code>function(value: Array&lt;T&gt;, getTagProps: function, ownerState: object) =&gt; ReactNode</code><br><em>value:</em> The <code>value</code> provided to the component.<br><em>getTagProps:</em> A tag props getter.<br><em>ownerState:</em> The state of the Autocomplete component.",
    "selectOnFocus": "If <code>true</code>, the input&#39;s text is selected on focus. It helps the user clear the selected value.",
    "size": "The size of the component.",
    "slotProps": "The props used for each slot inside.",
    "sx": "The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\"/system/getting-started/the-sx-prop/\">`sx` page</a> for more details.",
    "value": "The value of the autocomplete.<br>The value must have reference equality with the option in order to be selected. You can customize the equality behavior with the <code>isOptionEqualToValue</code> prop."
  },
  "classDescriptions": {
    "clearIndicator": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the clear indicator"
    },
    "endAdornment": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the endAdornment element"
    },
    "expanded": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "the listbox is displayed"
    },
    "focused": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "focused"
    },
    "focusVisible": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the option elements",
      "conditions": "they are keyboard focused"
    },
    "fullWidth": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>fullWidth={true}</code>"
    },
    "groupLabel": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the group&#39;s label elements"
    },
    "groupUl": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the group&#39;s ul elements"
    },
    "hasClearIcon": { "description": "Styles applied when the clear icon is rendered." },
    "hasPopupIcon": { "description": "Styles applied when the popup icon is rendered." },
    "input": { "description": "Styles applied to {{nodeName}}.", "nodeName": "the input element" },
    "inputFocused": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the input element",
      "conditions": "the input is focused"
    },
    "inputRoot": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the Input element"
    },
    "loading": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the loading wrapper"
    },
    "noOptions": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the no option wrapper"
    },
    "option": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the option elements"
    },
    "popperDisablePortal": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the popper element",
      "conditions": "<code>disablePortal={true}</code>"
    },
    "popupIndicator": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the popup indicator"
    },
    "popupIndicatorOpen": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the popup indicator",
      "conditions": "the popup is open"
    },
    "root": { "description": "Styles applied to the root element." },
    "tag": {
      "description": "Styles applied to {{nodeName}}, {{conditions}}.",
      "nodeName": "the tag elements",
      "conditions": "for example the chips"
    },
    "tagSizeMedium": {
      "description": "Styles applied to {{nodeName}}, {{conditions}}.",
      "nodeName": "the tag elements",
      "conditions": "for example the chips if <code>size=\"medium\"</code>"
    },
    "tagSizeSmall": {
      "description": "Styles applied to {{nodeName}}, {{conditions}}.",
      "nodeName": "the tag elements",
      "conditions": "for example the chips if <code>size=\"small\"</code>"
    }
  },
  "slotDescriptions": {
    "listbox": "The component used to render the listbox.",
    "paper": "The component used to render the body of the popup.",
    "popper": "The component used to position the popup."
  }
}
